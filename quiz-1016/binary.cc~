#include <stdio.h>
#include <sys/time.h>
#include <iostream>
#include <chrono>
using namespace std;
#define DATA_SIZE (1000*1000)
int Database[DATA_SIZE];

void
init_data(void)
{
  Database[0] = rand() % 8;
  for (int i = 1; i < DATA_SIZE; i++) {
    Database[i] = Database[i-1] + (rand() % 6) + 1;
  }

  for (int i = 0; i < DATA_SIZE; i++) {
    printf("%d ", Database[i]);
  }
  printf("\n");
}

void
init()
{
  init_data();
}

void
linear_search(const int key)
{
  std::chrono::system_clock::time_point start, end;
  start = std::chrono::system_clock::now();
  for (int i = 0; i < DATA_SIZE; i++) {
    if (Database[i] == key) {
      end = std::chrono::system_clock::now();
      double elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end-start).count();
      printf("[Linear] Found at %5d (Step = %8d)[%2.1f ns]\n", i, i, elapsed);
      
      return;
    }
  }
}

int
binary_search(const int key, const int min, const int max)
{
  int i, j, p;
  i = min;
  j = max;
  int step = 0;

  std::chrono::system_clock::time_point start, end;
  start = std::chrono::system_clock::now();

  while (i <= j) {
    step++;
    p = (i + j) / 2;
    //printf("%d ", Database[p]);
    if (key < Database[p]) j = p-1;
    else if (key > Database[p]) i = p+1;
    else if (key == Database[p]) {
      //printf("\n");
      end = std::chrono::system_clock::now();
      double elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end-start).count();

      printf("[Binary] Found at %5d (Step = %8d)[%2.1f ns]\n", p, step, elapsed);
      return p;
    }
  }

  return -1;
}

int main(void)
{
  int key;

  init();
  printf("Key? ");
  scanf("%d", &key);

  linear_search(key);

  binary_search(key, 0, DATA_SIZE-1);

  return 0;
}
